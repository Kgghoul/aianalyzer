import asyncio
import logging
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject
from aiogram.types import FSInputFile
from aiogram.utils.markdown import hbold, hcode, hlink
from pathlib import Path
import sys
import os

# Add the root directory to PYTHONPATH
root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(root_dir)
sys.path.append(backend_dir)

# Import project modules
from storage.database import get_db, engine  # This will now find the root storage first
from storage.models import Base, Vacancy
from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_IDS
from analytics.deepseek_analyzer import DeepseekAnalyzer
from parsers.hh_parser import HHParser

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize database
Base.metadata.create_all(bind=engine)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä—ã–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/collect - –°–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "/analyze - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º\n"
        "/export - –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON/CSV\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/collect - –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "  –ü—Ä–∏–º–µ—Ä: /collect python developer\n\n"
        "/analyze - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n"
        "  –ü—Ä–∏–º–µ—Ä: /analyze –∑–∞ –Ω–µ–¥–µ–ª—é\n\n"
        "/export [format] - –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "  –ü—Ä–∏–º–µ—Ä: /export json\n\n"
        "/stats - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã\n\n"
        "‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_support_username"
    )
    await message.answer(help_text)

@dp.message(Command("collect"))
async def cmd_collect(message: types.Message, command: CommandObject):
    """–°–±–æ—Ä –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    search_query = command.args if command.args else "python developer"
    status_message = await message.answer("üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π...")

    try:
        parser = HHParser()
        vacancies = parser.get_all_vacancies(search_query)
        
        if not vacancies:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ JSON
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = Path("parseddata") / f"vacancies_{timestamp}.json"
        output_file.parent.mkdir(exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(vacancies, f, ensure_ascii=False, indent=2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        saved_count = 0
        skipped_count = 0
        
        for vacancy_data in vacancies:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Å —Ç–∞–∫–∏–º URL
                existing = db.query(Vacancy).filter(Vacancy.url == vacancy_data['url']).first()
                if existing:
                    skipped_count += 1
                    continue
                    
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
                vacancy = Vacancy(
                    title=vacancy_data['title'],
                    company=vacancy_data['company'],
                    city=vacancy_data['city'],
                    tech_stack=vacancy_data['tech_stack'],
                    salary_from=vacancy_data['salary_from'],
                    salary_to=vacancy_data['salary_to'],
                    currency=vacancy_data['currency'],
                    url=vacancy_data['url'],
                    source=vacancy_data['source']
                )
                db.add(vacancy)
                saved_count += 1
            except Exception as e:
                logger.error(f"Error saving vacancy: {e}")
                continue
        
        db.commit()

        await status_message.edit_text(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π\n"
            f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count}\n"
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n"
            f"üìÅ JSON —Ñ–∞–π–ª: {output_file.name}"
        )
    except Exception as e:
        logger.error(f"Error collecting vacancies: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")

@dp.message(Command("analyze"))
async def cmd_analyze(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º"""
    status_message = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")

    try:
        db = next(get_db())
        analyzer = DeepseekAnalyzer()
        analysis = analyzer.analyze_vacancies(db)

        if not analysis:
            await status_message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:</b>\n\n"
            f"{analysis}"
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
            await status_message.delete()
        else:
            await status_message.edit_text(response)

    except Exception as e:
        logger.error(f"Error analyzing vacancies: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

@dp.message(Command("export"))
async def cmd_export(message: types.Message, command: CommandObject):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    format_type = command.args.lower() if command.args else "json"
    if format_type not in ["json", "csv"]:
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: json, csv")
        return

    status_message = await message.answer("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ exports
        exports_dir = Path("exports")
        files = list(exports_dir.glob(f"processed_*.{format_type}"))
        if not files:
            await status_message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        latest_file = max(files, key=lambda x: x.stat().st_mtime)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        doc = FSInputFile(latest_file)
        await message.answer_document(
            doc,
            caption=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        await status_message.delete()

    except Exception as e:
        logger.error(f"Error exporting data: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        db = next(get_db())
        total_vacancies = db.query(Vacancy).count()
        latest_vacancy = db.query(Vacancy).order_by(Vacancy.created_at.desc()).first()
        
        stats = (
            "üìà <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {hcode(total_vacancies)}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {hcode(latest_vacancy.created_at.strftime('%Y-%m-%d %H:%M'))}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {hcode('hh.ru')}"
        )
        
        await message.answer(stats)
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 